[
  {
    "objectID": "intro/hello_world.html",
    "href": "intro/hello_world.html",
    "title": "Hello world",
    "section": "",
    "text": "The aim of this exercise is to learn how to write and execute Python code.",
    "crumbs": [
      "Basics",
      "Hello world"
    ]
  },
  {
    "objectID": "intro/hello_world.html#objectives",
    "href": "intro/hello_world.html#objectives",
    "title": "Hello world",
    "section": "",
    "text": "The aim of this exercise is to learn how to write and execute Python code.",
    "crumbs": [
      "Basics",
      "Hello world"
    ]
  },
  {
    "objectID": "intro/hello_world.html#rationale",
    "href": "intro/hello_world.html#rationale",
    "title": "Hello world",
    "section": "Rationale",
    "text": "Rationale\nThere are plenty of programing languages, but all of them share some common principles. Computers execute machine code, a binary set of instructions that are carried out by the computer processors, but usually human do not write binary machine code, or even assembly language, the written code directly translatable to machine code.\nMost of the time programers write code in languages that are easier to write and read by us, humans. These codes, in turn, have to be translated to machine code. This process of translation is called compilation. Compilation is a complex process that comprises several steps, and different compilers and programming languages divide theses steps differently. There are compilers, like the C or C++ compiles, that take the code and compile it into a binary executable that can be directly run in a computer, while there are other, like the Python interpreter of the Java compiler, that are capable of running directly the human readable code that create an intermediate representation called bytecode. In these cases we need to install the language interpreter to run the program. For instance, if you want to run a Java or Python program you will need to install Java or Python before.\nPython is an interpreted language, so, once you install Python you will be able to directly run Python code. However, you first need to have Python available in your computer.\nThere are many ways of installing Python like:\n\nDownloading Python from python.org.\nUsing the Windows store or the Linux packages already prepared.\nUsing a Python version manager like uv.\nHaving Python included in your web browser thanks to Pyodide.\n\nIn this exercise we are going to use JupyterLite, a version of the Jupyter, a system that allows to write and run Python code directly in a web page, that does not require any previous installation because it already includes Python, thanks to Pyodide.\nThe Notebook document is composed by cells, some are text (in markdown format), and others contain Python code that can be executed. To execute a Python cell:\n\nSelect the cell that you want to execute.\nClick the play symbol on top of the page or press shift + enter.",
    "crumbs": [
      "Basics",
      "Hello world"
    ]
  },
  {
    "objectID": "intro/hello_world.html#resources",
    "href": "intro/hello_world.html#resources",
    "title": "Hello world",
    "section": "Resources",
    "text": "Resources\n\nExplanation of the Jupyter Notebook interface.\nReal Python Jupyter Notebook introduction.\nJupyter Notebook tutorial by dataquest.",
    "crumbs": [
      "Basics",
      "Hello world"
    ]
  },
  {
    "objectID": "intro/hello_world.html#print-hello-world",
    "href": "intro/hello_world.html#print-hello-world",
    "title": "Hello world",
    "section": "Print Hello world",
    "text": "Print Hello world",
    "crumbs": [
      "Basics",
      "Hello world"
    ]
  },
  {
    "objectID": "intro/hello_world.html#print-hello-your-name",
    "href": "intro/hello_world.html#print-hello-your-name",
    "title": "Hello world",
    "section": "Print Hello “Your Name”",
    "text": "Print Hello “Your Name”\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nprint('Jane')",
    "crumbs": [
      "Basics",
      "Hello world"
    ]
  },
  {
    "objectID": "types_and_operators/comparisons_and_bool_operators.html",
    "href": "types_and_operators/comparisons_and_bool_operators.html",
    "title": "Comparisons and boolean operators",
    "section": "",
    "text": "Official documentation on boolean operators for the built-in types.\nReal python tutorial on boolean operators.\n\n\n\nA critical part of any programming language is the comparison between items. For instance, is a number equal to the result of an operation? Is is bigger or maybe smaller? Some of the operators used are: equal (==), less than (&lt;), greater than (&gt;), not equal (!=), less or equal (&lt;=), greater or equal (&gt;).\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nprint(\"1 == 1:\", 1 == 1)\nprint(\"1 == 2:\", 1 == 2)\nprint(\"1 != 2:\", 1 != 2)\nprint(\"1 &lt; 2:\", 1 &lt; 2)\nprint(\"1 &gt; 2:\", 1 &gt; 2)\nprint(\"1 &lt;= 2:\", 1 &lt;= 2)\n\n\n\n\nIt is very important to understand the difference between the assingment operator (=) and the comparison operator (==). The assigment operator is used to assign a value (an object) to a variable, whereas the comparison operator is used to find out if two objects are the same or not.\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nRemember that the comparison operator is ==, not =.\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nname1 = “John” name2 = “John” print(a == b)\n\n\n\n\nThere is a catch with the floats. It is OK to check if they are greater or lower, but do not use the equality operator (==) to check if they are the same because the comparison might fail. Remember that floats are approximate. If you want to check if two floats are very similar you have to use the isclose function. This function is not directly avilable, you have to import it from the math module, we will work with modules in the future.\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nfrom math import isclose\n\nprint(isclose(1.0, 1.0000000000000001))\n\nprint(isclose(2.0, == 2))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nUse the comparison operator for the integers and the isclose function for the floats.\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nfrom math import isclose\nprint(\"0.1 + 0.1 = 0.2:\", isclose(0.1 + 0.1, 0.2))\nprint(\"0.8 - 0.3 = 0.5:\", isclose(0.1 + 0.1, 0.2))\nprint(\"0.8 - 0.3 = 0.5:\", isclose(0.1 x 0.3, 0.03))\nprint(\"9 / 3 = 3:\", isclose(9 /3, 3))\nprint(\"4**3 = 64:\", 4**3 == 64)\nprint(\"4**3  + 3**3 = 91:\", 4**3  + 3**3 == 91)\nprint(\"(2+1)/10 = 0.3:\", isclose((2+1)/10, 0.3))\nprint(\"0.2 + 0.1 = 0.3:\", isclose(0.2 + 0.1, 0.3))\n\n\n\n\nNone represents another special case. You might check if a variable is None using the equality operator, but is it recommended to use the is operator.\n\n\n\n\n\n\n\n\n\nThe boolean type has special operators: and, or, not. These operators define a boolean arithmetic.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nprint(\"True or False:\", True or False)\nprint(\"True and False:\", True and False)\nprint(\"True and not False:\", True and not False)\nprint(\"4 &lt;= 4 and True:\", 4 &lt;= 4 and True)\nprint(\"3 &gt; 2 and 4 &gt; 8:\", 3 &gt; 2 and 4 &gt; 8)\nprint(\"3 &gt; 2 or 4 &gt; 8:\", 3 &gt; 2 or 4 &gt; 8)\n\n\n\n\nExplore the boolean arithmetic which are the results for all the combinations of and and or.\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nTry all True and False combinations with and and or.\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nprint(\"True and True: \", True and True)\nprint(\"True and False: \", True and False)\nprint(\"False and True: \", False and True)\nprint(\"False and False: \", False and False)\n\nprint(\"True or True: \", True or True)\nprint(\"True or False: \", True or False)\nprint(\"False or True: \", False or True)\nprint(\"False or False: \", False or False)",
    "crumbs": [
      "Types and operators",
      "Comparisons and bool operators"
    ]
  },
  {
    "objectID": "types_and_operators/comparisons_and_bool_operators.html#comparisons",
    "href": "types_and_operators/comparisons_and_bool_operators.html#comparisons",
    "title": "Comparisons and boolean operators",
    "section": "",
    "text": "A critical part of any programming language is the comparison between items. For instance, is a number equal to the result of an operation? Is is bigger or maybe smaller? Some of the operators used are: equal (==), less than (&lt;), greater than (&gt;), not equal (!=), less or equal (&lt;=), greater or equal (&gt;).\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nprint(\"1 == 1:\", 1 == 1)\nprint(\"1 == 2:\", 1 == 2)\nprint(\"1 != 2:\", 1 != 2)\nprint(\"1 &lt; 2:\", 1 &lt; 2)\nprint(\"1 &gt; 2:\", 1 &gt; 2)\nprint(\"1 &lt;= 2:\", 1 &lt;= 2)\n\n\n\n\nIt is very important to understand the difference between the assingment operator (=) and the comparison operator (==). The assigment operator is used to assign a value (an object) to a variable, whereas the comparison operator is used to find out if two objects are the same or not.\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nRemember that the comparison operator is ==, not =.\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nname1 = “John” name2 = “John” print(a == b)\n\n\n\n\nThere is a catch with the floats. It is OK to check if they are greater or lower, but do not use the equality operator (==) to check if they are the same because the comparison might fail. Remember that floats are approximate. If you want to check if two floats are very similar you have to use the isclose function. This function is not directly avilable, you have to import it from the math module, we will work with modules in the future.\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nfrom math import isclose\n\nprint(isclose(1.0, 1.0000000000000001))\n\nprint(isclose(2.0, == 2))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nUse the comparison operator for the integers and the isclose function for the floats.\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nfrom math import isclose\nprint(\"0.1 + 0.1 = 0.2:\", isclose(0.1 + 0.1, 0.2))\nprint(\"0.8 - 0.3 = 0.5:\", isclose(0.1 + 0.1, 0.2))\nprint(\"0.8 - 0.3 = 0.5:\", isclose(0.1 x 0.3, 0.03))\nprint(\"9 / 3 = 3:\", isclose(9 /3, 3))\nprint(\"4**3 = 64:\", 4**3 == 64)\nprint(\"4**3  + 3**3 = 91:\", 4**3  + 3**3 == 91)\nprint(\"(2+1)/10 = 0.3:\", isclose((2+1)/10, 0.3))\nprint(\"0.2 + 0.1 = 0.3:\", isclose(0.2 + 0.1, 0.3))\n\n\n\n\nNone represents another special case. You might check if a variable is None using the equality operator, but is it recommended to use the is operator.",
    "crumbs": [
      "Types and operators",
      "Comparisons and bool operators"
    ]
  },
  {
    "objectID": "types_and_operators/comparisons_and_bool_operators.html#operations-with-booleans",
    "href": "types_and_operators/comparisons_and_bool_operators.html#operations-with-booleans",
    "title": "Comparisons and boolean operators",
    "section": "",
    "text": "The boolean type has special operators: and, or, not. These operators define a boolean arithmetic.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nprint(\"True or False:\", True or False)\nprint(\"True and False:\", True and False)\nprint(\"True and not False:\", True and not False)\nprint(\"4 &lt;= 4 and True:\", 4 &lt;= 4 and True)\nprint(\"3 &gt; 2 and 4 &gt; 8:\", 3 &gt; 2 and 4 &gt; 8)\nprint(\"3 &gt; 2 or 4 &gt; 8:\", 3 &gt; 2 or 4 &gt; 8)\n\n\n\n\nExplore the boolean arithmetic which are the results for all the combinations of and and or.\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nTry all True and False combinations with and and or.\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nprint(\"True and True: \", True and True)\nprint(\"True and False: \", True and False)\nprint(\"False and True: \", False and True)\nprint(\"False and False: \", False and False)\n\nprint(\"True or True: \", True or True)\nprint(\"True or False: \", True or False)\nprint(\"False or True: \", False or True)\nprint(\"False or False: \", False or False)",
    "crumbs": [
      "Types and operators",
      "Comparisons and bool operators"
    ]
  },
  {
    "objectID": "types_and_operators/types.html",
    "href": "types_and_operators/types.html",
    "title": "Types",
    "section": "",
    "text": "Real Python tutorial: basic data types\nOfficial documentation: types and operations.\nBasic introduction to type and variables, str and booleans. (In Spanish).\ntype function official documentation.\nReal Python introduction to numbers and bool.\nA discussion about the floating point arithmethic in Python.",
    "crumbs": [
      "Types and operators",
      "Types"
    ]
  },
  {
    "objectID": "types_and_operators/types.html#resources",
    "href": "types_and_operators/types.html#resources",
    "title": "Types",
    "section": "",
    "text": "Real Python tutorial: basic data types\nOfficial documentation: types and operations.\nBasic introduction to type and variables, str and booleans. (In Spanish).\ntype function official documentation.\nReal Python introduction to numbers and bool.\nA discussion about the floating point arithmethic in Python.",
    "crumbs": [
      "Types and operators",
      "Types"
    ]
  },
  {
    "objectID": "types_and_operators/types.html#types",
    "href": "types_and_operators/types.html#types",
    "title": "Types",
    "section": "Types",
    "text": "Types\nIn a computer language the variables have types. For instance, we have already used numbers and text strings.\n\n\n\n\n\n\n\nWe can ask for the type of variable (or object).\n\n\n\n\n\n\nThe type for the string is str. In most computer languages the text is called string or something similar because for the computer a text is a string of characters.",
    "crumbs": [
      "Types and operators",
      "Types"
    ]
  },
  {
    "objectID": "types_and_operators/types.html#number-types-int-and-float",
    "href": "types_and_operators/types.html#number-types-int-and-float",
    "title": "Types",
    "section": "Number types: int and float",
    "text": "Number types: int and float\nIn the previous example the type for the number was int (integer), but, in python, and most other languages, we have another very important numeric type: float (floating point number).\n\n\n\n\n\n\nThe main practical difference between the integer and float types is that the arithmetic for integers will be exact, but for float will be only approximate. This is not a Python quirk, but a general feature of the computers.\n\n\n\n\n\n\nThe main practical limitation, besides the inherent error due to the approximation, of the floating point arithmetic is that you have to be careful when you compare floats.",
    "crumbs": [
      "Types and operators",
      "Types"
    ]
  },
  {
    "objectID": "types_and_operators/types.html#other-types-bool-and-none",
    "href": "types_and_operators/types.html#other-types-bool-and-none",
    "title": "Types",
    "section": "Other types: bool and None",
    "text": "Other types: bool and None\nbool (boolean) is a special type that can only have two values: True or False.\n\n\n\n\n\n\nAnother special type that you will find quite often in Python code is None. This type can only have one value: None. It is usally employed when you want to have a variable that still has no value, it signifies that it is empty.",
    "crumbs": [
      "Types and operators",
      "Types"
    ]
  },
  {
    "objectID": "types_and_operators/types.html#python-is-dynamic",
    "href": "types_and_operators/types.html#python-is-dynamic",
    "title": "Types",
    "section": "Python is dynamic",
    "text": "Python is dynamic\nIn Python we don’t need to specify the type of a variable before using it, and we can even change the type of object that the variable refers to. That is not the case in other languages, like C or Rust. In those static languages the compiler needs to know the type of the variable beforehand, and the type of a variable can not be changed.\n\n\n\n\n\n\n\nModern Python has the option of specifying the types. This is not a requirement, but you will see some type hints in Python code.",
    "crumbs": [
      "Types and operators",
      "Types"
    ]
  },
  {
    "objectID": "types_and_operators/types.html#type-casting",
    "href": "types_and_operators/types.html#type-casting",
    "title": "Types",
    "section": "Type casting",
    "text": "Type casting\nType casting or type conversion is the action of changing one type into another. Python has functions to do this type casting.\n\n\n\n\n\n\nWe can also type cast to boolean.\n\n\n\n\n\n\nFind out which int and str values will be True and False when converted to boolean.\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\nTry with different int and str values, like 0, 1, 2, 3, “Hello”, ” “,”“.\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\n\n# Any int, but 0, will be True\nprint(\"0\", bool(0))\nprint(\"1\", bool(0))\nprint(\"2\", bool(2))\nprint(\"3\", bool(3))\n# Any str, but the empty str, will be True\nprint('\"\"', bool(\"\"))\nprint('\"Hello\"', bool(\"Hello\"))\nprint('\" \"', bool(\" \"))\n\n\n\n\nTry to convert a boolean to integer.\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nprint(\"True\", int(True))\nprint(\"False\", int(False))",
    "crumbs": [
      "Types and operators",
      "Types"
    ]
  },
  {
    "objectID": "types_and_operators/types.html#why-do-we-need-types",
    "href": "types_and_operators/types.html#why-do-we-need-types",
    "title": "Types",
    "section": "Why do we need types?",
    "text": "Why do we need types?\nFor a programming language using types is unavoidable. Different languages have different types, but they all have types. Why? Because, internally, the only thing that a computer can really store in memory is a binary number, and the same binary number can be interpreted as different objects depending on its type.\n\n\n\n\n\n\n\n\n\n\n\nflowchart LR\n    subgraph memory\n        0b110100\n    end\n    int[\"as int: 52\"]\n    0b110100 --&gt; int\n    float[\"as float: 7.3e-44\"]\n    0b110100 --&gt; float\n    str[\"as str: '4'\"]\n    0b110100 --&gt; str",
    "crumbs": [
      "Types and operators",
      "Types"
    ]
  },
  {
    "objectID": "types_and_operators/strings.html",
    "href": "types_and_operators/strings.html",
    "title": "Strings",
    "section": "",
    "text": "Official documentation for the str class.\nGoogle string tutorial, available in different languages.\nReal Python string tutorial.\nString tutorial in Spanish.\nOfficial string formatting documentation.\nReal Python string formatting tutorial.\n\n\n\n\nIn most programming laguages the type used for text are called strings, because they are considered string of characters. In Python you can create an object of type str by using a string literal, like:\n\n\n\n\n\n\nString literals can be defined with single and double quotes.\n\n\n\n\n\n\nIt is also common to use triple quotes. The advantage of the triple quotes is that they can include string literals with several lines.\n\n\n\n\n\n\nFix the following code:\n\n\n\n\n\n\n\n\n\nThe string type has a rich functionality available. We can, for instance create upper- or lowercase versions of the strings. This funcionality is accessed via the string class methods. It is still too early to formally introduce the concept what is a method, so lets just show some examples.\n\n\n\n\n\n\nSo methods are used by writing a dot (.), the name of the methods and two parentheses. You can ask for the whole documentation of the str methods by using the help function.\n\n\n\n\n\n\nLet’s see some examples of the most commonly used string methods.\n\n\n\n\n\n\nWe can also split a string into a list of strings.\n\n\n\n\n\n\nIf we have a list of strings we can join them.\n\n\n\n\n\n\nWe can also get every letter by using list.\n\n\n\n\n\n\nTo find out the lenght of a string we use the function len.\n\n\n\n\n\n\nCalculate the GC content, percentage of Gs and Cs of a DNA sequence.\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\nYou can remove characters using replace(“character”, ““).\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe are writting some software that deal with file names, and we would like to change every .txt file into a .doc file. How could we change these file names?\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe have file with values separated by commas and we want the separated by tabs, how could we do it.\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\nThe tab character is represented by “.\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nImagine that we are reading a text file in which each line gives us information from one person. Remove the line feed and split the information items.\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\nRemember that you can remove the feed line and return characters using the strip method and that you can split a sting with the split method.\nOnce you have the three items you can do:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nStrings can be converted into numbers and numbers into strings.\n\n\n\n\n\n\nFix the following code:\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHow many digits a number has.\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nStrings are a sequence of characters and they can be indexed, we can get some of the characters, by using the square brackets: [].\n\n\n\n\n\n\n\n\n\nPython positive and negative string indexes\n\n\nWe will see that this is a general property of any sequence type in Python, all of them can be indexed in the same way.\nIndexes allow us to ask for not just one, but several items, in the string case several characters using the colon (:) to separate the first and the last position. Take into account that the first position will be included in the selection but the last one will be not.\n\n\n\n\n\n\nPredict the result of running the following code:\n\n\n\n\n\n\nThe combination of the start and end position is called slice. By using this kind of indexing we are slicing the string. Slices can also be build using the slice built-in functions, but this is a more avanced topic.\nSlices, besides start and stop, allow for a third number, the step, that indicates the increment between the index of the selected items. For instance, we could use the step to select every three characters.\n\n\n\n\n\n\nStep is commonly used to reverse the string by using a step of -1.\n\n\n\n\n\n\nAnother way of reversing a string, or any Python sequence, is to use the reversed. The result won’t be exactly the same because reversed returns an iterator that has to be converted into a string. The reversed function could seem more cumbersome, but iterators have many advantages in different context. But we won’t discuss them here because this is a more advanced topic.\n\n\n\n\n\n\nExcercise, create a way of checking if a string is a palindrome.\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\nYou could check if the reversed string is equal to the original string.\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWrite a program that given a number prints its digits in reverse order and separated by spaces.\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAnother useful string method is find. It allows us to look for ocurrences of a substring inside of a string. (Remember that we count from zero.)\n\n\n\n\n\n\nFind the position of the substring “wor” in the string “Hello world”, and the use that position to extract the “world” substring from “Hello world”\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nText strings can be added.\n\n\n\n\n\n\nOne confusing Python behaviour is that it will add two string even if there is no + sign between them. This is called string concatenation.\n\n\n\n\n\n\nPredict the result of running the following code:\n\n\n\n\n\n\nThe multiplication operation is also defined for str and int. It just repeats the string the given number of times.\n\n\n\n\n\n\nWrite a program that given a number n returns the value of the operation: n + nn + nnn\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nYou can transform, type cast, numbers into strings and string into numbers with the functions: int and str.\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe could check is a string is included in another string by using the in operator.\n\n\n\n\n\n\n\n\n\n\n\n\nFix the following code:\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\nRemember that variables name can not have spaces.\nThe method capitalize creates a string with the first letter in uppercase.\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFix the following code:\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\nYou can create a string from a number by using the str function.\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nf-strings are a very common and powerful way of creating string. You will see them a lot in the Python code. They allow, for instance to create a string from a variable in a very suscint way using curly braces ({}).\n\n\n\n\n\n\nf-strings have a very powerfull formatting language that allows to specify how the strings should be created.\n\n\n\n\n\n\n\n\n\nPython strings a UTF-8 strings. String encoding is a more advanced topic, but any seasoned programmer will end up having to understand a little bit about character encoding standards.",
    "crumbs": [
      "Types and operators",
      "Strings"
    ]
  },
  {
    "objectID": "types_and_operators/strings.html#resources",
    "href": "types_and_operators/strings.html#resources",
    "title": "Strings",
    "section": "",
    "text": "Official documentation for the str class.\nGoogle string tutorial, available in different languages.\nReal Python string tutorial.\nString tutorial in Spanish.\nOfficial string formatting documentation.\nReal Python string formatting tutorial.",
    "crumbs": [
      "Types and operators",
      "Strings"
    ]
  },
  {
    "objectID": "types_and_operators/strings.html#string-literals",
    "href": "types_and_operators/strings.html#string-literals",
    "title": "Strings",
    "section": "",
    "text": "In most programming laguages the type used for text are called strings, because they are considered string of characters. In Python you can create an object of type str by using a string literal, like:\n\n\n\n\n\n\nString literals can be defined with single and double quotes.\n\n\n\n\n\n\nIt is also common to use triple quotes. The advantage of the triple quotes is that they can include string literals with several lines.\n\n\n\n\n\n\nFix the following code:",
    "crumbs": [
      "Types and operators",
      "Strings"
    ]
  },
  {
    "objectID": "types_and_operators/strings.html#string-methods",
    "href": "types_and_operators/strings.html#string-methods",
    "title": "Strings",
    "section": "",
    "text": "The string type has a rich functionality available. We can, for instance create upper- or lowercase versions of the strings. This funcionality is accessed via the string class methods. It is still too early to formally introduce the concept what is a method, so lets just show some examples.\n\n\n\n\n\n\nSo methods are used by writing a dot (.), the name of the methods and two parentheses. You can ask for the whole documentation of the str methods by using the help function.\n\n\n\n\n\n\nLet’s see some examples of the most commonly used string methods.\n\n\n\n\n\n\nWe can also split a string into a list of strings.\n\n\n\n\n\n\nIf we have a list of strings we can join them.\n\n\n\n\n\n\nWe can also get every letter by using list.\n\n\n\n\n\n\nTo find out the lenght of a string we use the function len.\n\n\n\n\n\n\nCalculate the GC content, percentage of Gs and Cs of a DNA sequence.\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\nYou can remove characters using replace(“character”, ““).\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe are writting some software that deal with file names, and we would like to change every .txt file into a .doc file. How could we change these file names?\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe have file with values separated by commas and we want the separated by tabs, how could we do it.\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\nThe tab character is represented by “.\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nImagine that we are reading a text file in which each line gives us information from one person. Remove the line feed and split the information items.\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\nRemember that you can remove the feed line and return characters using the strip method and that you can split a sting with the split method.\nOnce you have the three items you can do:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote",
    "crumbs": [
      "Types and operators",
      "Strings"
    ]
  },
  {
    "objectID": "types_and_operators/strings.html#type-casting",
    "href": "types_and_operators/strings.html#type-casting",
    "title": "Strings",
    "section": "",
    "text": "Strings can be converted into numbers and numbers into strings.\n\n\n\n\n\n\nFix the following code:\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHow many digits a number has.\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote",
    "crumbs": [
      "Types and operators",
      "Strings"
    ]
  },
  {
    "objectID": "types_and_operators/strings.html#indexing",
    "href": "types_and_operators/strings.html#indexing",
    "title": "Strings",
    "section": "",
    "text": "Strings are a sequence of characters and they can be indexed, we can get some of the characters, by using the square brackets: [].\n\n\n\n\n\n\n\n\n\nPython positive and negative string indexes\n\n\nWe will see that this is a general property of any sequence type in Python, all of them can be indexed in the same way.\nIndexes allow us to ask for not just one, but several items, in the string case several characters using the colon (:) to separate the first and the last position. Take into account that the first position will be included in the selection but the last one will be not.\n\n\n\n\n\n\nPredict the result of running the following code:\n\n\n\n\n\n\nThe combination of the start and end position is called slice. By using this kind of indexing we are slicing the string. Slices can also be build using the slice built-in functions, but this is a more avanced topic.\nSlices, besides start and stop, allow for a third number, the step, that indicates the increment between the index of the selected items. For instance, we could use the step to select every three characters.\n\n\n\n\n\n\nStep is commonly used to reverse the string by using a step of -1.\n\n\n\n\n\n\nAnother way of reversing a string, or any Python sequence, is to use the reversed. The result won’t be exactly the same because reversed returns an iterator that has to be converted into a string. The reversed function could seem more cumbersome, but iterators have many advantages in different context. But we won’t discuss them here because this is a more advanced topic.\n\n\n\n\n\n\nExcercise, create a way of checking if a string is a palindrome.\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\nYou could check if the reversed string is equal to the original string.\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWrite a program that given a number prints its digits in reverse order and separated by spaces.\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAnother useful string method is find. It allows us to look for ocurrences of a substring inside of a string. (Remember that we count from zero.)\n\n\n\n\n\n\nFind the position of the substring “wor” in the string “Hello world”, and the use that position to extract the “world” substring from “Hello world”\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip",
    "crumbs": [
      "Types and operators",
      "Strings"
    ]
  },
  {
    "objectID": "types_and_operators/strings.html#operations-with-text-strings",
    "href": "types_and_operators/strings.html#operations-with-text-strings",
    "title": "Strings",
    "section": "",
    "text": "Text strings can be added.\n\n\n\n\n\n\nOne confusing Python behaviour is that it will add two string even if there is no + sign between them. This is called string concatenation.\n\n\n\n\n\n\nPredict the result of running the following code:\n\n\n\n\n\n\nThe multiplication operation is also defined for str and int. It just repeats the string the given number of times.\n\n\n\n\n\n\nWrite a program that given a number n returns the value of the operation: n + nn + nnn\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nYou can transform, type cast, numbers into strings and string into numbers with the functions: int and str.\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe could check is a string is included in another string by using the in operator.\n\n\n\n\n\n\n\n\n\n\n\n\nFix the following code:\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\nRemember that variables name can not have spaces.\nThe method capitalize creates a string with the first letter in uppercase.\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFix the following code:\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\nYou can create a string from a number by using the str function.\n\n\n\n\n\n\n\n\n\n\n\nNote",
    "crumbs": [
      "Types and operators",
      "Strings"
    ]
  },
  {
    "objectID": "types_and_operators/strings.html#f-strings",
    "href": "types_and_operators/strings.html#f-strings",
    "title": "Strings",
    "section": "",
    "text": "f-strings are a very common and powerful way of creating string. You will see them a lot in the Python code. They allow, for instance to create a string from a variable in a very suscint way using curly braces ({}).\n\n\n\n\n\n\nf-strings have a very powerfull formatting language that allows to specify how the strings should be created.",
    "crumbs": [
      "Types and operators",
      "Strings"
    ]
  },
  {
    "objectID": "types_and_operators/strings.html#utf-and-the-enconding-tables",
    "href": "types_and_operators/strings.html#utf-and-the-enconding-tables",
    "title": "Strings",
    "section": "",
    "text": "Python strings a UTF-8 strings. String encoding is a more advanced topic, but any seasoned programmer will end up having to understand a little bit about character encoding standards.",
    "crumbs": [
      "Types and operators",
      "Strings"
    ]
  },
  {
    "objectID": "functions/arguments.html",
    "href": "functions/arguments.html",
    "title": "Function arguments",
    "section": "",
    "text": "More on defining functions in the official documentation.\nOptional arguments and args and kwargs in Real Python.",
    "crumbs": [
      "Functions",
      "Arguments"
    ]
  },
  {
    "objectID": "functions/arguments.html#resources",
    "href": "functions/arguments.html#resources",
    "title": "Function arguments",
    "section": "",
    "text": "More on defining functions in the official documentation.\nOptional arguments and args and kwargs in Real Python.",
    "crumbs": [
      "Functions",
      "Arguments"
    ]
  },
  {
    "objectID": "functions/arguments.html#keyword-arguments",
    "href": "functions/arguments.html#keyword-arguments",
    "title": "Function arguments",
    "section": "Keyword arguments",
    "text": "Keyword arguments\nSo far we have seen that functions can be called by passing arguments.\n\n\n\n\n\n\nHowever, you will see another syntax in Python code, using keyword arguments.\n\n\n\n\n\n\nWhen we use keyword arguments the order in which the arguments is passed is irrelevant.\n\n\n\n\n\n\nYou can even mix arguments passed by its order with arguments passed using keywords.\n\n\n\n\n\n\nThere is only one thing that is not allowed, to pass an argument with no keyword after an argument passed using a keyword.",
    "crumbs": [
      "Functions",
      "Arguments"
    ]
  },
  {
    "objectID": "functions/arguments.html#default-arguments",
    "href": "functions/arguments.html#default-arguments",
    "title": "Function arguments",
    "section": "Default arguments",
    "text": "Default arguments\nIn function calls it is very common to give default values to some arguments. These parameters can then be omitted in the function call unless we want to change their values.\n\n\n\n\n\n\n\nDefault mutable arguments\nWhen you create your own function with default parameters you have to be careful because there is a gotcha. Remember that there are inmutable objects, like str, int or float, and mutable objects, like list. A list is mutable because we can change its members after we have created it, but a text string is inmutable because once we have created we can not modify it (although be could derive other strings for it).\n\n\n\n\n\n\nIf you use a mutable object as a default parameter in a function definition, you will get into trouble.\n\n\n\n\n\n\nThe problem is that the default values for the arguments are created when the function is defined, so just once. Thus, in this example there is only one default empty list for all function calls to the create_guest_list function. Every time that we get the default list we are getting the same empty list. This would not be a problem if the object wasn’t mutable, but it is a huge problem with mutable objects. So the pattern that Python programmers use to avoid this problem is the following, setting the default value to None and creating the list, if needed, inside the function. In this way one different default empty list is created for each function call, not like before that only was created when the function was built.",
    "crumbs": [
      "Functions",
      "Arguments"
    ]
  },
  {
    "objectID": "functions/arguments.html#references-to-mutable-objects",
    "href": "functions/arguments.html#references-to-mutable-objects",
    "title": "Function arguments",
    "section": "References to mutable objects",
    "text": "References to mutable objects\nIn Python every variable is a reference, and arguments to functions are thus passed by reference. When we pass a text string or a list to a function Python creates new references to this objects.\nTry to guess what will be the result of running the following code:\n\n\n\n\n\n\nGive x a value in order the get the result to be 10. Should x be 4 or 6?\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWith lists the behaviour seems different.\n\n\n\n\n\n\nWhy do we get these different results?\nLet’s think about what is going on.\n\na = \"hello\"\n\n\n\n\n\n\nflowchart TB\n    subgraph variables\n    a\n    b:::invisible\n    end\n    Memory:::memory\n    subgraph Memory\n    hello1[\"'hello'\"]\n    hello2[\"'HELLO'\"]:::invisible\n    end\n    a --&gt; hello1\n    classDef invisible opacity:0%\n    classDef memory fill:#ccc\n\n\n\n\n\n\n\n# a.upper() creates a new string, it does not modify\n# the original string that remains intact in memory\n# and now b refers to the new string \"HELLO\"\nb = a.upper()\n\n\n\n\n\n\nflowchart TB\n    subgraph variables\n    a\n    b\n    end\n    Memory:::memory\n    subgraph Memory\n    hello1[\"'hello'\"]\n    hello2[\"'HELLO'\"]:::invisible\n    end\n    a --&gt; hello1\n    b --&gt; hello1\n    classDef invisible opacity:0%\n    classDef memory fill:#ccc\n\n\n\n\n\n\n\nb = a\n\n\n\n\n\n\nflowchart TB\n    subgraph variables\n    a\n    b\n    end\n    Memory:::memory\n    subgraph Memory\n    hello1[\"'hello'\"]\n    hello2[\"'HELLO'\"]\n    end\n    a --&gt; hello1\n    b --&gt; hello2\n    classDef invisible opacity:0%\n    classDef memory fill:#ccc\n\n\n\n\n\n\nWith mutable objects, like lists, the result will be different.\n\na = [\"hello\", \"Jane\"]\n\n\n\n\n\n\nflowchart TB\n    subgraph variables\n    a\n    b:::invisible\n    end\n    Memory:::memory\n    subgraph Memory\n    hello1[\"['hello', 'Jane']\"]\n    end\n    a --&gt; hello1\n    classDef invisible opacity:0%\n    classDef memory fill:#ccc\n\n\n\n\n\n\n\nb = a\n\n\n\n\n\n\nflowchart TB\n    subgraph variables\n    a\n    b\n    end\n    Memory:::memory\n    subgraph Memory\n    hello1[\"['hello', 'Jane']\"]\n    end\n    a --&gt; hello1\n    b --&gt; hello1\n    classDef invisible opacity:0%\n    classDef memory fill:#ccc\n\n\n\n\n\n\n\n# We are modifying the original list\nb[0] = b[0].upper()\n\n# b[0] refers to the string \"hello\"\n# b[0].upper() creates a new string in memory \"HELLO\"\n# so b[0] = b[0].upper() is equivalent to\nb[0] = \"HELLO\"\n# We are asking to the list refered by b, the same list that a refers to,\n# to change its first member from \"hello\" to \"HELLO\"\n# So we get a modified list [\"HELLO\"] and both a and b refer still to this list\n# that is in fact the same original list, that is has changed its first member\n\n\n\n\n\n\nflowchart TB\n    subgraph variables\n    a\n    b\n    end\n    Memory:::memory\n    subgraph Memory\n    hello1[\"['HELLO', 'Jane']\"]\n    end\n    a --&gt; hello1\n    b --&gt; hello1\n    classDef invisible opacity:0%\n    classDef memory fill:#ccc\n\n\n\n\n\n\nThis is an aspect that varies from language to language. If you study a different programming language you will need to understand if the variables are ment to be values, pointers or references. In Python they are always references. You can read a Real Python tutorial about Python references.",
    "crumbs": [
      "Functions",
      "Arguments"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Introduction to programming with Python",
    "section": "",
    "text": "This is an introduction to Python aimed to students with no prior programming experience. There are many great introductions to Python, but we thought that it would be useful for us to create a new one that:\n\nIt relies mainly in examples and exercises.\nIt runs those examples and exercises directly in the web, avoiding the need to install Python in the first day of class.\nIt does not try to cover every detail of the Python language, but just what a beginner might need to start the journey.\n\nWe decided to try this approach after following the rustlings path, an exercise set aimed at teaching the Rust programming language. Rustlings assumes that the student has previously read the Rust introductory book. For this course we have decided to add resources to read for each topic, so, the student could start by reading these resources, and then proceed to practice with the code examples and exercises. Alternatively, the examples could be used in a practical session to teach the theory and, then, the exercises could be use as the practice for the students.\n\n\nThere are other very useful languages, like Javascript for the web, R for statistics, C or Rust for system programming, so, why should we start learning how to program in Python?\nPython is:\n\none of the easiest languages to learn and understand. Learning how to program involves getting used to some abstract concepts related to how computers work, so the easier the language, the better the learning experience will be.\nvery productive. The same ease of use that make Python a good learning language make it very productive for professional developers.\nfree software. It is developed by a community and released under an open source licence.\n\nThese characteristics make Python a very popular tool.\nAccording to IEEE Spectrum Python is the top programming language of 2024. In the 2024 stackoverflow survery, 51% of the developers had used Python in the last year; only Javascript, with 62.3%, is a more popular programming language. Moreover, 67.7% of these developers want to learn an use Python.\nAccording to the 2023 Python Developer survey Python is used mostly for:\n\nWeb development (21%)\nData analysis (10%)\nData engineering (6%)\nMachine learning (10%)\nAcademic research (9%)\nEducation (9%)\n\nSo, if you are interested in data analysis or web development, Python is not just a great language to learn, but an interesting professional option.\n\n\n\n\nThe official Python tutorial. Also, available in Spanish, French, Italian, Portuguese, and other languages.\nPython glossary.\nPython Crash Course\nThe Python Coding Book\nHow to Think Like a Computer Scientist\nMicrosoft course: Python for beginners.\nGoogle Python class. Also available in Spanish, German, French, and Indonesian.\nThe Python community maintains a list of Python courses and tutorials.\nIntroducción a la programación con Python3\nA course in Spanish of focused in Data Analysis with Python\n\n\n\n\n\nFuture coder\nAdam Emery’s course\nCodedex Python course\n\n\n\n\nThe official Python documentation.\n\n\n\nThis site has been built with the quarto publishing system complemented by the quarto live extension that allows Python to run in the web browser by using pyodide. Without the effort of these open source developers this resource wouldn’t exist.\n\n\n\nThis content is released under a Creative Commons BY licence.",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "index.html#why-python",
    "href": "index.html#why-python",
    "title": "Introduction to programming with Python",
    "section": "",
    "text": "There are other very useful languages, like Javascript for the web, R for statistics, C or Rust for system programming, so, why should we start learning how to program in Python?\nPython is:\n\none of the easiest languages to learn and understand. Learning how to program involves getting used to some abstract concepts related to how computers work, so the easier the language, the better the learning experience will be.\nvery productive. The same ease of use that make Python a good learning language make it very productive for professional developers.\nfree software. It is developed by a community and released under an open source licence.\n\nThese characteristics make Python a very popular tool.\nAccording to IEEE Spectrum Python is the top programming language of 2024. In the 2024 stackoverflow survery, 51% of the developers had used Python in the last year; only Javascript, with 62.3%, is a more popular programming language. Moreover, 67.7% of these developers want to learn an use Python.\nAccording to the 2023 Python Developer survey Python is used mostly for:\n\nWeb development (21%)\nData analysis (10%)\nData engineering (6%)\nMachine learning (10%)\nAcademic research (9%)\nEducation (9%)\n\nSo, if you are interested in data analysis or web development, Python is not just a great language to learn, but an interesting professional option.",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "index.html#python-books-and-tutorials",
    "href": "index.html#python-books-and-tutorials",
    "title": "Introduction to programming with Python",
    "section": "",
    "text": "The official Python tutorial. Also, available in Spanish, French, Italian, Portuguese, and other languages.\nPython glossary.\nPython Crash Course\nThe Python Coding Book\nHow to Think Like a Computer Scientist\nMicrosoft course: Python for beginners.\nGoogle Python class. Also available in Spanish, German, French, and Indonesian.\nThe Python community maintains a list of Python courses and tutorials.\nIntroducción a la programación con Python3\nA course in Spanish of focused in Data Analysis with Python",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "index.html#other-interactive-python-courses-for-beginers",
    "href": "index.html#other-interactive-python-courses-for-beginers",
    "title": "Introduction to programming with Python",
    "section": "",
    "text": "Future coder\nAdam Emery’s course\nCodedex Python course",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "index.html#python-reference-documentation",
    "href": "index.html#python-reference-documentation",
    "title": "Introduction to programming with Python",
    "section": "",
    "text": "The official Python documentation.",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "index.html#technology",
    "href": "index.html#technology",
    "title": "Introduction to programming with Python",
    "section": "",
    "text": "This site has been built with the quarto publishing system complemented by the quarto live extension that allows Python to run in the web browser by using pyodide. Without the effort of these open source developers this resource wouldn’t exist.",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "index.html#licence",
    "href": "index.html#licence",
    "title": "Introduction to programming with Python",
    "section": "",
    "text": "This content is released under a Creative Commons BY licence.",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "local_install/run_python.html",
    "href": "local_install/run_python.html",
    "title": "Installing and running Python",
    "section": "",
    "text": "Python code can be run in many different platforms that include: computers with different operating systems, like Windows, MacOS and Linux, embedded systems, and the web browser.\nHowever, a file with Python code, by itself, will not be executable. For instance, imagine that you create an useful Python program and you send it to a colleague. Usually he won’t be able to run it unless he first installs Python. This is what we mean when we say that Python is an interpreted language. We don’t need to compile the Python code to a binary file capable of being run by the operating system. The advantage of this approach is that we don’t need to compile the code for every operating system and architecture, but the limitation is that we need to install Python.\nPython is free and it is not difficult to install, but there are many operating systems and environments and the way in which we install Python in all of them might be different.",
    "crumbs": [
      "Install and run Python",
      "Install"
    ]
  },
  {
    "objectID": "local_install/run_python.html#python-online",
    "href": "local_install/run_python.html#python-online",
    "title": "Installing and running Python",
    "section": "Python online",
    "text": "Python online\nSo far we have run the Python code in the web browser. In fact the web pages that we have used so far in the course included a version of the Python interpreter that has run the code inside the browser.\nThere are other sites that allow to run Python code online like:\n\nThe Future Coder IDE allows to write, run and debug Python programs.\nIn the Pyodide REPL the user can execute Python commands.",
    "crumbs": [
      "Install and run Python",
      "Install"
    ]
  },
  {
    "objectID": "local_install/run_python.html#operating-system-specific-installers",
    "href": "local_install/run_python.html#operating-system-specific-installers",
    "title": "Installing and running Python",
    "section": "Operating system specific installers",
    "text": "Operating system specific installers\nRunning Python online is great, but for many uses we need to install it in our computer and run it locally. Python is open source and it is freely distributed in python.org. So, one way of getting Python is to go the download section in python.org, download the latest installer for your operating system and install it. That will install Python, but you might have some issues with it:\n\nYou will need to remember to install the Python updates.\nYou will be able to install only one Python version at a time.\nThe PATH operating system variable might end up not being correctly configured. So, although Python will be installed the interpreter won’t be directly available in the command-line shell.\n\nAlternativery, you could use a specific installer for your operating system, like the Microsoft Store for windows or the package manager of your Linux distribution. There are many different cases and alternatives, and they are covered in the Python Setup and Usage in python.org.",
    "crumbs": [
      "Install and run Python",
      "Install"
    ]
  },
  {
    "objectID": "local_install/run_python.html#anaconda",
    "href": "local_install/run_python.html#anaconda",
    "title": "Installing and running Python",
    "section": "Anaconda",
    "text": "Anaconda\nAnother alternative to install Python locally is to use the anaconda installer. Anaconda ships Python, R, and many other tools used in data analysis and it is very convenient because the Anaconda installer and navigator make the experience of using Python very similar in different operating systems.",
    "crumbs": [
      "Install and run Python",
      "Install"
    ]
  },
  {
    "objectID": "local_install/run_python.html#jupyter",
    "href": "local_install/run_python.html#jupyter",
    "title": "Installing and running Python",
    "section": "Jupyter",
    "text": "Jupyter\nAn alternative way of using Python in the browser, but with a local installation is jupyter. This is a tool commonly used in Data analysis, and it is included in the anaconda distribution.",
    "crumbs": [
      "Install and run Python",
      "Install"
    ]
  },
  {
    "objectID": "local_install/run_python.html#virtual-environments",
    "href": "local_install/run_python.html#virtual-environments",
    "title": "Installing and running Python",
    "section": "Virtual environments",
    "text": "Virtual environments\nOnce you start using Python professionaly it will be highly advisable to use virtual environments. This is an advanced topic for this course, but you will have to learn about virtual environments if you plan to use Python. Here you have a couple of resources:\n\nVirtual environments in Real Python.\nvenv module documentation",
    "crumbs": [
      "Install and run Python",
      "Install"
    ]
  },
  {
    "objectID": "local_install/run_python.html#uv",
    "href": "local_install/run_python.html#uv",
    "title": "Installing and running Python",
    "section": "uv",
    "text": "uv\nThere is a new way to install Python: uv.\nOnce you install uv, it will:\n\nmanage the installation of different Python versions.\nrun Python scripts\nmanage Python projects, with their virtual environments and dependencies, for you.\n\nIn this course we will assume that you have installed uv.",
    "crumbs": [
      "Install and run Python",
      "Install"
    ]
  },
  {
    "objectID": "local_install/run_python.html#code-editor",
    "href": "local_install/run_python.html#code-editor",
    "title": "Installing and running Python",
    "section": "Code editor",
    "text": "Code editor\nTo edit Python code you will need a code editor. Visual Studio Code is now one of the most popular ones.",
    "crumbs": [
      "Install and run Python",
      "Install"
    ]
  },
  {
    "objectID": "control_flow/index.html",
    "href": "control_flow/index.html",
    "title": "Control flow",
    "section": "",
    "text": "The flow of the code is the order in which the statements, functions or instructions are executed. By default the code is executed line by line:\nprint(\"First\")\nprint(\"Second\")\nprint(\"Third\")\nBut this order can be altered in different ways, and these modifications are known as control flow. We could:\n\nChoose to execute some statements only if some condition is met.\nRun the same code over and over again for every item.\nCreate new functions and call them.\n\nTo understand the control of the flow of execution we need to understand the concept of a block of code. A block is a set of lines that are grouped together, for instance, the set of lines that will be executed only when a given condition if met.",
    "crumbs": [
      "Control flow"
    ]
  },
  {
    "objectID": "control_flow/if.html",
    "href": "control_flow/if.html",
    "title": "if",
    "section": "",
    "text": "if statement in the official documentation.\nConditional statements in Real Python.",
    "crumbs": [
      "Control flow",
      "if"
    ]
  },
  {
    "objectID": "control_flow/if.html#resources",
    "href": "control_flow/if.html#resources",
    "title": "if",
    "section": "",
    "text": "if statement in the official documentation.\nConditional statements in Real Python.",
    "crumbs": [
      "Control flow",
      "if"
    ]
  },
  {
    "objectID": "control_flow/if.html#if",
    "href": "control_flow/if.html#if",
    "title": "if",
    "section": "if",
    "text": "if\nif is one of the basic control flow statements. It allow us to execute some code only if a given condition is met.\n\n\n\n\n\n\nIf the condition is not met the code inside the if block won’t be executed.\n\n\n\n\n\n\nEvery line included in the block will be executed, not just the first one.\n\n\n\n\n\n\nFix the following code to print “Done!” even when the condition is not met.\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\nRemember that a block ends when the indentation returns to the previous level.\n\n\n\n\n\n\n\n\n\n\n\nNote",
    "crumbs": [
      "Control flow",
      "if"
    ]
  },
  {
    "objectID": "control_flow/if.html#else",
    "href": "control_flow/if.html#else",
    "title": "if",
    "section": "else",
    "text": "else\nIt is common that we want to execute some code if the condition is met, and some other code when the condition was not met, for that we use else.\n\n\n\n\n\n\n\n\n\n\n\n\nFix this code:\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWrite some code capable of, given a pair of numbers, finding out which is the highest.\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhy would be wrong this solution for the highest number program and in which case would fail?\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip",
    "crumbs": [
      "Control flow",
      "if"
    ]
  },
  {
    "objectID": "control_flow/if.html#elif",
    "href": "control_flow/if.html#elif",
    "title": "if",
    "section": "elif",
    "text": "elif\nelif allows us to test for different conditions sequentialy.\n\n\n\n\n\n\nWhen we have several conditions only the first met will be executed.\n\n\n\n\n\n\nAs a more powerful alternative to elif Python has a match statement.\nWrite a program that classifies a person into: baby, child, teenager, young, and old\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWrite a program that writes the quote of the selected philosopher.\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip",
    "crumbs": [
      "Control flow",
      "if"
    ]
  },
  {
    "objectID": "control_flow/if.html#boolean-casting",
    "href": "control_flow/if.html#boolean-casting",
    "title": "if",
    "section": "Boolean casting",
    "text": "Boolean casting\nWhen a condition is evaluated, internally the if statement casts anything given to a boolean. So, you will usually see expressions like:\n\n\n\n\n\n\nIt would be very weird to write:\n\n\n\n\n\n\nRemember that everything that we talked about booleans and boolean arithmetic is applicable to the if evaluation.\nFix the following code to prevent the error when a = 0.\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip",
    "crumbs": [
      "Control flow",
      "if"
    ]
  },
  {
    "objectID": "control_flow/for.html",
    "href": "control_flow/for.html",
    "title": "for loops",
    "section": "",
    "text": "for statement in the official documentation.\nfor loops in Real Python.",
    "crumbs": [
      "Control flow",
      "for loops"
    ]
  },
  {
    "objectID": "control_flow/for.html#resources",
    "href": "control_flow/for.html#resources",
    "title": "for loops",
    "section": "",
    "text": "for statement in the official documentation.\nfor loops in Real Python.",
    "crumbs": [
      "Control flow",
      "for loops"
    ]
  },
  {
    "objectID": "control_flow/for.html#for",
    "href": "control_flow/for.html#for",
    "title": "for loops",
    "section": "for",
    "text": "for\nfor allows us to execute a block of code for each item. The variable defined after the for keyword will take the value of each item, one at a time, one for each iteration.\n\n\n\n\n\n\nWhat would happen if we executed the following code? How would you fix it?\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInternally the for loop works by calling the next on an iterator from the given iterable. An iterator is an object that supports the generation of one item at a time when given to the next function until it runs out of items. So the previous for would be, more or less, equivalent running the following code.\n\n\n\n\n\n\nThis kind of for loop, the one implemented in the Python, in other languages is known as a foreach loop. To have the functionallity available in other programming languages, in which the for statement just iterates over some numbers, you could combine a for loop with the range function.\nWrite a for loop that prints the first 10 natural numbers.\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\nYou can use a list or the range function.\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\nWith a list.\n\n\n\n\n\n\nWith the range function.\n\n\n\n\n\n\n\n\n\n\nCreate a program that writes the following:\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\nThere are many ways of solving this exercise, here you have some.\n\n\n\n\n\n\n\n\n\n\n\n\nUsing map and range.\n\n\n\n\n\n\nUsing a list comprenhension.\n\n\n\n\n\n\n\n\n\n\nAdditionally, Python has a while statement, another way of doing loops.",
    "crumbs": [
      "Control flow",
      "for loops"
    ]
  },
  {
    "objectID": "control_flow/for.html#break",
    "href": "control_flow/for.html#break",
    "title": "for loops",
    "section": "break",
    "text": "break\nDuring at any moment the loop could be stopped, broken, by using break.",
    "crumbs": [
      "Control flow",
      "for loops"
    ]
  },
  {
    "objectID": "control_flow/for.html#continue",
    "href": "control_flow/for.html#continue",
    "title": "for loops",
    "section": "continue",
    "text": "continue\nThe continue statement allows us to move to the next iteration without running the rest of the code in the block.",
    "crumbs": [
      "Control flow",
      "for loops"
    ]
  },
  {
    "objectID": "control_flow/for.html#enumerate",
    "href": "control_flow/for.html#enumerate",
    "title": "for loops",
    "section": "enumerate",
    "text": "enumerate\nIt is quite common to need both the item and its index. We could do it like:\n\n\n\n\n\n\nHowever, this is a pattern so common that Python have solved it by using the function enumerate.\n\n\n\n\n\n\nEnumerate works by creating an iterator of tuples with two elements: the index, and the original item.\n\n\n\n\n\n\nAnd since Python supports mutiple assigment what we are doing in the for loop is equivalente to:",
    "crumbs": [
      "Control flow",
      "for loops"
    ]
  },
  {
    "objectID": "control_flow/for.html#for-exercises",
    "href": "control_flow/for.html#for-exercises",
    "title": "for loops",
    "section": "for exercises",
    "text": "for exercises\nFor the numbers from 1 to 20 write which ones are odd and even.\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nrange needs a start and stop.\nYou can use the module operator (%) to check if a number is even.\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPrint the multiplication table for a given number.\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSum all numbers from 1 to a given number.\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWrite a program that sums all the digits of a number.\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nYou can transform, type cast, strings into numbers and number into strings using int and str.\nRemember also that strings are iterable, so if you give a string to a for it will iterate through every character.\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\n\n\n\n\n\n\nYou could also create a list with the numbers, and the use sum.\n\n\n\n\n\n\nThe same result could be calculated without using a for loop using functional programming.\n\n\n\n\n\n\n\n\n\n\nCalculate the factorial for a number.\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\n\n\n\n\n\n\nUsing a functional approach with reduce.\n\n\n\n\n\n\n\n\n\n\nCreate a program that given a list of words prints if they are short (less than 4 characters long), not so long (between 4 and 7 characters), and very long (more than 7 characters).\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nRemember that you can use the len function to get the number of characters of a string and you could create an if, elif, else.\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCreate a program that given a list of numbers it filters out the ones bigger than 10.\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nRemember that you can create an empty list and append items to it one by one.\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWrite a program that outputs which people were a Beatle member and their index in the list.\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nRemember that you can use enumerate to get the index in any for, and that the in operator allows you to check if an item is in a list.\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\n\n\n\n\n\n\nIf the list were large it would be much efficient to use a dictionary or a set than a list. The solution using a set would be:\n\n\n\n\n\n\nUsing filter and a lambda we could even skip many iterations of the for.\n\n\n\n\n\n\n\n\n\n\nWrite a program that removes all vowels (aeiou) from a given text.\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\nYou can use the in operator to check if a substring is found inside another string.\nA possibility is to create a for loop that iterates through every letter in the text and that stores the letter in a list only if it is not a vowel.\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\n\n\n\n\n\n\nThe same could be done without a for loop, using the filter function.\n\n\n\n\n\n\nOr with a list comprenhension.\n\n\n\n\n\n\n\n\n\n\nWe are reading a comma-separated values (CSV) text file. In each file we have measures and we want to calculate the mean, max, min and sum.\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nRemember that the str split method can split a text string into a list and the float funtion can transform a text into a number.\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\n\n\n\n\n\n\nAlternativerly you could use the map and sum functions.\n\n\n\n\n\n\nOr the mean function and a list comprenhension.\n\n\n\n\n\n\n\n\n\n\nWrite a program that stores all the multiples of 7 from 1 to n.\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nRemember that you can use the range function to get the numbers and the modulo operator to get the remainder of an integer division.\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\n\n\n\n\n\n\nAlternatively, it could be solved using filter and a lambda function.\n\n\n\n\n\n\nOr a list comprenhension (this is a very common style that you will find in Python code).\n\n\n\n\n\n\n\n\n\n\nCreate a program that given some text it counts how many times a word appears.\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\n\n\n\n\n\n\nAlternatively you could use the Counter class of the collections module.\n\n\n\n\n\n\nOr you could do it with a nested list comprenhension.\n\n\n\n\n\n\n\n\n\n\nCreate a program that collects the quotes from each author in different lists.\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWrite a program capable of creating a reversed and complementary sequence of DNA. To do it you have to go from the end to the start and transform A into T, T into A, C into G and G into C.\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip",
    "crumbs": [
      "Control flow",
      "for loops"
    ]
  },
  {
    "objectID": "control_flow/block.html",
    "href": "control_flow/block.html",
    "title": "Block",
    "section": "",
    "text": "A block of code is a set of statements, functions or instructions that are grouped together. In most programming languages the blocks of code are created by using curly braces ({}). For instance, in C the statements executed when a test condition is met would be written as:\nif (testCondition) {\n   // statements\n}\nIn Python a block of code is created by using indentation.\na = 42\n\nif a == 42:\n    # This is the first line of the block\n    print(\"This is the answer to\")\n    print(\"life, the universe, and everything else\")\n    # This is the last line of the block\n\nprint(\"We are outside the block of code defined by if\")\n\n\nIn the if and for the code starts with a colon (:)\nThe next line after the colon should be indented\nThe block ends when the indentation goes back to the previous level.\n\nThe standard is to create the indentation by using four spaces."
  },
  {
    "objectID": "local_install/hello_world2.html",
    "href": "local_install/hello_world2.html",
    "title": "Hello world",
    "section": "",
    "text": "Real Python introduction to the Terminal.\nMicrosoft instroduction to PowerShell.\nThe Unix Shell in Software Carpentry.\nAn introduction to the Unix Shell (in Spanish)",
    "crumbs": [
      "Install and run Python",
      "Local hello world"
    ]
  },
  {
    "objectID": "local_install/hello_world2.html#resources",
    "href": "local_install/hello_world2.html#resources",
    "title": "Hello world",
    "section": "",
    "text": "Real Python introduction to the Terminal.\nMicrosoft instroduction to PowerShell.\nThe Unix Shell in Software Carpentry.\nAn introduction to the Unix Shell (in Spanish)",
    "crumbs": [
      "Install and run Python",
      "Local hello world"
    ]
  },
  {
    "objectID": "local_install/hello_world2.html#the-terminal",
    "href": "local_install/hello_world2.html#the-terminal",
    "title": "Hello world",
    "section": "The terminal",
    "text": "The terminal\nWe are used to interact with our computers using Graphical User Interfaces, we click and drag icons and windows, but when we are developing Python programs our main way of interaction will be a command-line interface, a shell running in a terminal.\nIn a command-line interface, there is a prompt that promts the user the write a text command. Once we write the command and hit “enter” the computer runs the command, writes the output in the terminal and, after the command ends, the prompt will be ready for the next command. A command is just a computer program.\nIn different operating systems there are different terminal applications. In Linux and MacOS the application is usually named “terminal”, while in Windows there are different applications but we recommend “PowerShell” running in the “Windows Terminal”.\nDuring the course we recommend to use the editor Visual Studio Code to write Python code and this editor includes its our terminal, so you won’t need any other software. If you haven’t installed Visual Studio Code yet, we recommend that you do it.",
    "crumbs": [
      "Install and run Python",
      "Local hello world"
    ]
  },
  {
    "objectID": "local_install/hello_world2.html#hello-world",
    "href": "local_install/hello_world2.html#hello-world",
    "title": "Hello world",
    "section": "Hello world",
    "text": "Hello world\nFirst, create a folder/directory in which you will create and store the Python programs. Then open Visual Studio Code and in the File menu select Open Folder and Open the Folder that you just created. Now in the Visual Studio File Explorer click with the right mouse button, select “New File…” and create a file named hello.py. All Python programs, by convention, are text files with the extension “.py”.\nAt this point Visual Studio should have created the “hello.py” text file and it will have open it, so we can type our first Python program.\n\nprint(\"Hello\")\n\nHello\n\n\nNow that we have our first program, we can run it in the Visual Studio Code Terminal. In the menu select “Terminal” -&gt; “New Terminal”. That will open a terminal inside Visual Studio Code. The prompt will indicate the folder/directory in which we are working.\nWe could run our Python programs directly using the Python interpreter command: “python”, but we are going to uv. If you haven’t installed uv, go ahead and do it. Once we have uv available, it will manage the Python installation for us and it will also run Python, just write in Visual Studio Terminal:\n\n$ uv run hello.py\n\n(The dollar sign is part of the prompt, we are just including it to show that the command is meant to be written in the prompt, but the dolar sign itself should not be written. In this case you should only write “uv run hello.py”)\nClick enter and, hopefully, you should have run your first Python program in the Terminal.",
    "crumbs": [
      "Install and run Python",
      "Local hello world"
    ]
  },
  {
    "objectID": "functions/definition.html",
    "href": "functions/definition.html",
    "title": "Function definition",
    "section": "",
    "text": "Functions are the main way of structuring our code. So far we have been writting very small pieces of code, but it most reallistic projects we will need to create more complex functionalities.\nWhen we program what we do is to manipulate data. Think in a program as a series of manipulations on the data that is stored in memory. We take some pieces of data, for example the radius of a circle, and we do a action, like calculating the area. So we need ways of defining that data, and for that we use types (and classes), and we create functions (and methods) to manipulate that data.\nImagine data as things/objects or properties of those objects, and functions as actions that act on the data. For example, we have some data, the radius of a circle, we apply an action to it, calc_area, and we obtain a new piece of data, the area. Both radius and area are pieces of data, whereas cacl_area is an action, a verb.\nAlternatively you can think on a programming function like in a kind of mathematical function, that takes some parameters and returns a result (although as we will see both the parameters and the result are optional).\nflowchart LR\n  radius([\"radius\"])-- calc_area --&gt;area([\"area\"])",
    "crumbs": [
      "Functions",
      "Definition"
    ]
  },
  {
    "objectID": "functions/definition.html#resources",
    "href": "functions/definition.html#resources",
    "title": "Function definition",
    "section": "Resources",
    "text": "Resources\n\nPython function and return in Real Python.\nFunctions in the Microsoft Python for beginners course.\nScopes in Python in Real Python.",
    "crumbs": [
      "Functions",
      "Definition"
    ]
  },
  {
    "objectID": "functions/definition.html#definition-and-calling",
    "href": "functions/definition.html#definition-and-calling",
    "title": "Function definition",
    "section": "Definition and calling",
    "text": "Definition and calling\nIn Python functions are defined by using the def keyword.\n\n\n\n\n\n\nIf you run the previous piece of code, you want see any result. Once you define a function, the function will be ready to be used, but in order to use it you need to call it. We call a function by using parentheses (()).\n\n\n\n\n\n\nThe lines that belong to the function are the lines in the block indented after the line with the function definition. Fix the following code:\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIt is important to understand how the flow is changed by the function. Once you call the function the flow goes into the function until the function ends. At that point the flow is send back to the line that called the function.\nTry to fill out the numbers in the prints of the following code to track the flow of execution. In which order will be the lines executed?\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip",
    "crumbs": [
      "Functions",
      "Definition"
    ]
  },
  {
    "objectID": "functions/definition.html#arguments",
    "href": "functions/definition.html#arguments",
    "title": "Function definition",
    "section": "Arguments",
    "text": "Arguments\nSome functions do not require any data to carry out the action, but most do. For instance, if we want the previous function to print a more personalized greeting it would need the name of the person.\n\n\n\n\n\n\nPassing data to a function is easy, but a lot is going on under the hood:\n\nWe have created a text string (“Jane”). That means that Python has created and stored a object of type str in memory.\n\n\n\n\n\n\nflowchart TB\n    subgraph main [ ]\n    person:::invisible\n    end\n    subgraph say [ ]\n    name:::invisible\n    end\n    Memory:::memory\n    subgraph Memory\n    Jane[\"'Jane'\"]\n    end\n    person --&gt; Jane\n    name --&gt; Jane\n    classDef variable fill:#f96\n    classDef invisible opacity:0%\n    classDef memory fill:#ccc\n    linkStyle 0,1 stroke-width:0px\n\n\n\n\n\n\n\nWe have assigned the variable person to that string, so now person refers to that str object stored in memory.\n\n\n\n\n\n\nflowchart TB\n    subgraph main [global scope]\n    person\n    end\n    subgraph say [ ]\n    name:::invisible\n    end\n    Memory:::memory\n    subgraph Memory\n    Jane[\"'Jane'\"]:::variable\n    end\n    person --&gt; Jane\n    name --&gt; Jane\n    classDef invisible opacity:0%\n    classDef memory fill:#ccc\n    linkStyle 1 stroke-width:0px\n\n\n\n\n\n\n\nWhen we call the function we pass the reference of the object, the variable person, to the function.\nThe function receives the reference to the str object and assigns to it a new reference, in this case called name. It is very important to understand that although the object is the same, the “Jane” string, we have created a new reference to it, the new variable name.\n\n\n\n\n\n\nflowchart TB\n    subgraph main [global scope]\n    person\n    end\n    subgraph say [say_hello scope]\n    name\n    end\n    Memory:::memory\n    subgraph Memory\n    Jane[\"'Jane'\"]\n    end\n    person --&gt; Jane\n    name --&gt; Jane\n    classDef invisible opacity:0%\n    classDef memory fill:#ccc",
    "crumbs": [
      "Functions",
      "Definition"
    ]
  },
  {
    "objectID": "functions/definition.html#return",
    "href": "functions/definition.html#return",
    "title": "Function definition",
    "section": "return",
    "text": "return\nWe have learn how to pass arguments, data, to a function, let’s see how we can return data to the caller.\n\n\n\n\n\n\nWe use the return statement to return a value generated in the function to the caller. Again, like in the parameters passed to the function, the caller will receive a new reference to the value stored in memory that can assign to a new variable. return is use to move a result in memory between scopes. For instance, in the previous example there is a variable, inside the function, named area, but in the first call we store the reference in a variable named result. area and result are two variables, two references to the same value stored in memory, but they are variables that belong to different scopes. In this case area belongs to the scope of the calc_rect_area function and result to the global scope.\nFix the following code\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\nDoes the function return something?\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWrite a program with two functions, one that transforms from Fahrenheit to Celsius, and another one from Celsius to Fahrenheit.\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDefine a function that reverses a list, like the reversed funtion.\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\nRemember that indexing has the posibility of reversing using -1 as the step (some_sequence[::-1]).\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote also that each time that the function returns its scope, the variables created inside the function and available to it, is erased, so each call will be independent. Imagine that we want to store the number of times that a function has been called. Could you modify the following function to accomplish that?\n\n\n\n\n\n\nThe most natural way to store states is to use instances of classes (objects), but this is an advance topic that we won’t discuss now.\nFunctions can return multiple results, we just need to separate them with commas. Complete the following code.\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThink about how is possible that all the different options in the following code work. What is going on?\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nUnder the hood both functions are returning the same, a tuple, an imutable list.\n\n\n\n\n\n\nSo in the first function “return a, b” is first creating the tuple (a, b), and then returning it.\nWhen we call a function that returns a tuple we can assing the tuple to a variable, like in:\n\n\n\n\n\n\nBut we can also use the mutiple assignment that we studied for lists and tuples.\n\n\n\n\n\n\n\n\n\n\nWrite a function that given a list of numbers it calculates and returns the maximum and the minimum.\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nYou could iterate through the numbers using a for loop. In each iteration you could check if the number is lower than the current minimum or is larger than the current maximum. In the first iteration the current minimum and maximum could be None.\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\n\n\n\n\n\n\nAlternatively you could do it with the min and max functions.\n\n\n\n\n\n\n\n\n\n\nIn fact Python functions can only return just one thing, an object, one object. Every Python function always returns just one object.\n\n\n\n\n\n\nOnce a return is executed in a function, the function returns and its scope is destroyed with all its variables. What would be the result of executing the following code and why?\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nEverytime we call a function a new scope with new data is created and the function starts its execution in its first line and ends its execution once it encounters the first return. That’s why no matter how many time we call this function it will always return “Hi” and “Bye” will be never reached.\n\n\n\n\nWrite a function that returns “odd” or “even” depending on the number that we pass.\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip",
    "crumbs": [
      "Functions",
      "Definition"
    ]
  },
  {
    "objectID": "functions/definition.html#scopes",
    "href": "functions/definition.html#scopes",
    "title": "Function definition",
    "section": "Scopes",
    "text": "Scopes\nTo understand what do we mean when we say that we pass some data to a function we need to understand the concept of the scope.\nWhen we program we store and access data in memory. As we have seen we refer to the data stored in memory by using variables. We could think that those variables, once they are created, are available in every part of our program. Some programming languages used that approach, but when you try to build a program with more than a few lines of code it becomes very difficult to track which part of the program has changed a variable. So maintining those large programs is very difficult.\nMost programming languages use the concept of the scope. The scope defines where in the code a variable is available, and functions define their own scope. For instance, if we declare a variable inside a function it won’t be available outside.\n\n\n\n\n\n\nWe get a “‘name’ is not defined error” because the variable name was created inside the say_hello function, so in the say_hello scope, and is not available outside. A variable can only be used inside its scope. It is said that the function has a local scope in which its variables are available.\nBe careful because Python also has a global scope, and if you create the variable outside the function it will be available inside.\n\n\n\n\n\n\nIn this case the variable name has been created in the global scope, is a global variable available everywhere. In general avoid creating global variables, specially if they are just inmutable constants. If you think you need a global variable, think twice, in most cases is better not to use them. This is an advance topic, but here’s a tip for the future you, to keep states it might be much better to use objects, instances of a class, that global variables. But this is a too advance topic for now. Just remember, try very hard not to use global varibles, although you can do some exceptions with some inmutable ones use just for global configurations. It is common to use this kind of global variables, inmutables and related to configuration, and, by convention, people name them using all caps variable names.",
    "crumbs": [
      "Functions",
      "Definition"
    ]
  },
  {
    "objectID": "functions/definition.html#methods",
    "href": "functions/definition.html#methods",
    "title": "Function definition",
    "section": "Methods",
    "text": "Methods\nSo far we haven’t talked about clases and their instances, the objects because they are a slightly more advanced topic related to Object-oriented programming (OOP).\nPython is a object oriented language, in fact, in Python almost everything is an object. And although we are now going to discuss this topic yet it is important to understand the concept and use of methods, the object “functions”. In fact we have already used methods when dealing with strings.\n\n\n\n\n\n\nupper is a method, a function associated with an object. In this case the object is the string “hello” and upper is a function that acts on that object. By convention functions associated to objects are called methods. So upper is a method, a function associated to the objects of type str. You can think on a method like on a function that has a a first argument the given object. If upper were a standard function the previous code would be:\ns = \"hello\"\ns = upper(s)\nprint(s)\nSomething similar to that would work if upper were a normal function but, instead is a method associated to an object, so the syntax is different, we use a dot after the object, then the name of the method/function, and then the language makes sure that the object is passed as the first argument to this method.\nIf you want to understand Python you need to learn about objects, classes, methods and properties, because Python is a deeply object-oriented language, but this is a topic that we can leave for later.",
    "crumbs": [
      "Functions",
      "Definition"
    ]
  },
  {
    "objectID": "functions/definition.html#anonymous-functions-lambdas",
    "href": "functions/definition.html#anonymous-functions-lambdas",
    "title": "Function definition",
    "section": "Anonymous functions, lambdas",
    "text": "Anonymous functions, lambdas\nIn Python, and many other programming languages, we can create anonymous functions. This is a more abstract idea, but they are used quite commonly in Python, so it would be nice, at least, that you could recognized them.\nlambdas are usually very small functions, just one line, and they are used as parameters for other functions. For instance, they are very common in as the key argument to the sorted function.\n\n\n\n\n\n\nYou can learn more about lambdas in the official documentation or in Real Python.",
    "crumbs": [
      "Functions",
      "Definition"
    ]
  },
  {
    "objectID": "types_and_operators/operators.html",
    "href": "types_and_operators/operators.html",
    "title": "Operators",
    "section": "",
    "text": "In any programming language we can do operations on data and, in most, for the basic operation a operator syntax is defined.",
    "crumbs": [
      "Types and operators",
      "Operators"
    ]
  },
  {
    "objectID": "types_and_operators/operators.html#resources",
    "href": "types_and_operators/operators.html#resources",
    "title": "Operators",
    "section": "Resources",
    "text": "Resources\n\nReal python tutorial on operators and statements.\nOfficial documentation for expressions and operators.",
    "crumbs": [
      "Types and operators",
      "Operators"
    ]
  },
  {
    "objectID": "types_and_operators/operators.html#basic-numeric-operations",
    "href": "types_and_operators/operators.html#basic-numeric-operations",
    "title": "Operators",
    "section": "Basic numeric operations",
    "text": "Basic numeric operations\nFor instance, in Python we can sum to numbers using the + operator.\n\n\n\n\n\n\nWith integers and floats we can use the basic arithmetic operators: +, -, /, *, .\n\n\n\n\n\n\nThere is also an operator for power: **.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nwidth = 20\nheight = 5\narea = width * area\nprint(\"area = \", area)\n\n\n\n\nCreate a program that calculates the area of a circle.\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nimport math\npi = math.pi\nr = 10\narea = 2 * pi * (r**2)\nprint(\"area = \", area)",
    "crumbs": [
      "Types and operators",
      "Operators"
    ]
  },
  {
    "objectID": "types_and_operators/operators.html#integer-division",
    "href": "types_and_operators/operators.html#integer-division",
    "title": "Operators",
    "section": "Integer division",
    "text": "Integer division\nFor integers Python defines two other special operators: integer division (//), and remainder (%).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nprint(\"9 % 3 \", 9 % 3)\nprint(\"14 % 2 \", 14 % 2)\nprint(\"14 % 3 \", 14 % 3)\nprint(\"9 // 3 \", 9 // 3)\nprint(\"14 //2 \", 14 //2)\nprint(\"14 % 3 \", 14 % 3)\n\n\n\n\nFind out if the numbers 10938 and 9893 are divisible by 3.\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\nUse the mod operator %, and the type casting to bool.\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\n\nnumber = 10938\nremainder = number % 3\nprint(\"Is \", number, \"divisible by 3? The remainder is:\", remainder, \"So is it not divisible? \", bool(remainder))\nnumber = 9893\nremainder = number % 3\nprint(\"Is \", number, \"divisible by 3? The remainder is:\", remainder, \"So is it not divisible? \", bool(remainder))",
    "crumbs": [
      "Types and operators",
      "Operators"
    ]
  },
  {
    "objectID": "types_and_operators/operators.html#common-unary-operators",
    "href": "types_and_operators/operators.html#common-unary-operators",
    "title": "Operators",
    "section": "Common unary operators",
    "text": "Common unary operators\nThe operators that we have seen so far take two elements, for instance the add operator (+) takes two numbers and returns the sum of both. These operators are called binary because they take two elements. But there are also unary operators, that only act in one element. The one most commonly used is the += operator.\n\n\n\n\n\n\nThere are other unary operators, like -=, *=, \\= but they are not used as much.\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nmy_age = 42\nmy_age += 1\nprint(\"After my birthday, my age will be\", my_age)\n\nnumber_of_items = 10\nnumber_of_items -= 1\nprint(\"After selling an item, the number of items will be\", number_of_items)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip",
    "crumbs": [
      "Types and operators",
      "Operators"
    ]
  },
  {
    "objectID": "types_and_operators/dictionaries.html",
    "href": "types_and_operators/dictionaries.html",
    "title": "Dictionaries",
    "section": "",
    "text": "Read about dict, and more on dictionaries in the official documentation.\nA Real Python introduction to dictionaries.",
    "crumbs": [
      "Compound types",
      "Dictionaries"
    ]
  },
  {
    "objectID": "types_and_operators/dictionaries.html#resources",
    "href": "types_and_operators/dictionaries.html#resources",
    "title": "Dictionaries",
    "section": "",
    "text": "Read about dict, and more on dictionaries in the official documentation.\nA Real Python introduction to dictionaries.",
    "crumbs": [
      "Compound types",
      "Dictionaries"
    ]
  },
  {
    "objectID": "types_and_operators/dictionaries.html#creation",
    "href": "types_and_operators/dictionaries.html#creation",
    "title": "Dictionaries",
    "section": "Creation",
    "text": "Creation\nDictionaries, like lists, are compound types, they can hold several items. Lists are sequences, the elements that they hold are stored one after another, and we can access their items by their index, their position in the sequence.\n\n\n\n\n\n\n\n\n\n\n\nflowchart LR\n    subgraph values\n    John\n    Ringo\n    Paul\n    George\n    end\n    subgraph indexes\n    0\n    1\n    2\n    3\n    end\n    0 --&gt; John\n    1 --&gt; Ringo\n    2 --&gt; Paul\n    3 --&gt; George\n\n\n\n\n\n\nDictionaries also hold different values, but they are not ordered and, thus, we do not refer to them by their index. When we create a dictionary we assign a key to every value and we use those keys to access to the values.\n\n\n\n\n\nflowchart LR\n    subgraph values\n    Ringo\n    Starr\n    drums\n    end\n    subgraph keys\n    name\n    surname\n    instrument\n    end\n    name --&gt; Ringo\n    surname --&gt; Starr\n    instrument --&gt; drums\n\n\n\n\n\n\n\n\n\n\n\n\nWe create a dictionary using curly braces ({}), and we write the key and the value separated by a colon (:): {key1: value1, key2: value2}. In the previous example the keys were: “name”, “surname”, and “instrument”, and the values were: “Ringo”, “Starr”, and “drums”. As you have seen in the previous example, we can get the values stored in a dictionary by using square brackes: some_dictionary[key].\nA dictionary is a mapping, it maps keys to values. In other languages these kind of objects are called hash tables, hash maps or associative arrays.\nWe can ask Python to give us the all keys and values of a dictionary.\n\n\n\n\n\n\nBe aware that the methods keys and values return iterators, so to print lists we have to pass those iterators to the list function.\nWe can also iterate through tuples of keys and values.\n\n\n\n\n\n\nIf we want to know how many items is the dictionary holding we use the len function.",
    "crumbs": [
      "Compound types",
      "Dictionaries"
    ]
  },
  {
    "objectID": "types_and_operators/dictionaries.html#dicts-are-mutable",
    "href": "types_and_operators/dictionaries.html#dicts-are-mutable",
    "title": "Dictionaries",
    "section": "dicts are mutable",
    "text": "dicts are mutable\nDictionaries, like lists, are mutable, we can add, modify or remove, items after their creation.",
    "crumbs": [
      "Compound types",
      "Dictionaries"
    ]
  },
  {
    "objectID": "types_and_operators/dictionaries.html#dict-keys-are-unique",
    "href": "types_and_operators/dictionaries.html#dict-keys-are-unique",
    "title": "Dictionaries",
    "section": "dict keys are unique",
    "text": "dict keys are unique\nOne very important aspect of a dictionary is that keys are unique. If we try to store two values under the same key, only one will remain.",
    "crumbs": [
      "Compound types",
      "Dictionaries"
    ]
  },
  {
    "objectID": "types_and_operators/dictionaries.html#key-in-dict",
    "href": "types_and_operators/dictionaries.html#key-in-dict",
    "title": "Dictionaries",
    "section": "key in dict",
    "text": "key in dict\nWe can check if a key is stored in a dictionary by using the in operator.",
    "crumbs": [
      "Compound types",
      "Dictionaries"
    ]
  },
  {
    "objectID": "types_and_operators/lists.html",
    "href": "types_and_operators/lists.html",
    "title": "Lists",
    "section": "",
    "text": "Lists and tuples in the official documentation, and more on lists.\nA Real Python introduction to lists.\nlists on the google course (available in different languages).",
    "crumbs": [
      "Compound types",
      "Lists"
    ]
  },
  {
    "objectID": "types_and_operators/lists.html#resources",
    "href": "types_and_operators/lists.html#resources",
    "title": "Lists",
    "section": "",
    "text": "Lists and tuples in the official documentation, and more on lists.\nA Real Python introduction to lists.\nlists on the google course (available in different languages).",
    "crumbs": [
      "Compound types",
      "Lists"
    ]
  },
  {
    "objectID": "types_and_operators/lists.html#lists",
    "href": "types_and_operators/lists.html#lists",
    "title": "Lists",
    "section": "Lists",
    "text": "Lists\nSo far we have seen basic, or scalar, types like: int, float, str, bool and None. Lists are a compound type, a type capable of holding different items.\n\n\n\n\n\n\nLists can be heterogeneous, they can hold inside elements of different types.\n\n\n\n\n\n\nIn Python there is another type, very similar to a list, but that is limited to have all its elements of the same type, the array. Arrays are more efficient than lists, but in most cases the difference is not noticeable and lists are just fine.\nLists can hold any kind of type, not just basic type, but also compound types, like another list.\n\n\n\n\n\n\nIt is quite common to use lists to represent vectors, lists of numbers, and lists of lists to represent 2d-arrays, matrices.\n\n\n\n\n\n\n\nList creation with list\nAs we have seen lists can be created using square brackets ([]). But lists can also be created using the list function. This function takes any iterable and returns a list. (An iterable is an object capable of returning its members one at a time). For instance we can create a list of letters using list.",
    "crumbs": [
      "Compound types",
      "Lists"
    ]
  },
  {
    "objectID": "types_and_operators/lists.html#lists-are-sequences",
    "href": "types_and_operators/lists.html#lists-are-sequences",
    "title": "Lists",
    "section": "Lists are sequences",
    "text": "Lists are sequences\nLists are sequences. A sequence is an object composed by items that can be accessed using indexes and that has a length, the number of items that holds. We have already seen another sequence type, the string.\n\nNumber of items, length\n\n\n\n\n\n\n\n\nIndexing\nLists items can be accessed using indexes, exactly like strings were accessed.\n\n\n\n\n\n\nYou have to be careful. When the index is just one number you will get one item, but if the index is a slice you will always get a list, even if you are selecting just one number.\n\n\n\n\n\n\nPredict the result of running the following code:\n\n\n\n\n\n\nCreate a list with the numbers from 0 to 9, extract the odd and even numbers, the first 5 and the last 5.\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsorting\nLists can be sorted using the sorted function.\n\n\n\n\n\n\nsorted does the sorting doing pairwise comparisons of the elements. For a list of numbers the result is what we could expect.\n\n\n\n\n\n\nFor for the letters, or many other kinds of objects, the result can be weird.\n\n\n\n\n\n\nThe sorted function has a parameter, key, that allows to modify the elements compared. key will be a function that takes one element and returns the element to be compared. This is a topic somewhat more advanced, but you have an excellent sorting tutorial in the official documentation.\n\n\n\n\n\n\nSort the words in alphabetical order.\n\n\n\n\n\n\nThe sorted functions creates a new list, the original list will be intact.\n\n\n\n\n\n\nIf you wanted to sort the original list you could use the sort method.\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\n\nThe string split method will split the text into a list of strings.\nThe string replace method can be used to remove unwanted text.\nThe sorted function can take a key parameter to modify the items compared during the sorting procedure.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nreverse\nAs we did with strings we can reverse a list, or any other sequence, using the function reversed. reversed returns an iterator, so in order to have a list we need to use the list function on the reversed result.",
    "crumbs": [
      "Compound types",
      "Lists"
    ]
  },
  {
    "objectID": "types_and_operators/lists.html#min-max-and-sum",
    "href": "types_and_operators/lists.html#min-max-and-sum",
    "title": "Lists",
    "section": "min, max and sum",
    "text": "min, max and sum\nPython has some useful functions for numeric sequences and iterators like min, max and sum.\n\n\n\n\n\n\nThere are more basic statistics functions in the statistics module of the starndard library, and if you are interested in data analysis you will have to learn about numpy, pandas, and the rest of the libraries that conform the data analysis ecosystem.",
    "crumbs": [
      "Compound types",
      "Lists"
    ]
  },
  {
    "objectID": "types_and_operators/lists.html#multiple-assignment",
    "href": "types_and_operators/lists.html#multiple-assignment",
    "title": "Lists",
    "section": "Multiple assignment",
    "text": "Multiple assignment\nLists, and tuples, can be used to assign its values to different variables.\n\n\n\n\n\n\nThis is a feature commonly used in Python that, sometimes is known as destructuring assignment. These assignments will fail if the number of items at both sides are different.",
    "crumbs": [
      "Compound types",
      "Lists"
    ]
  },
  {
    "objectID": "types_and_operators/lists.html#list-operators",
    "href": "types_and_operators/lists.html#list-operators",
    "title": "Lists",
    "section": "list operators",
    "text": "list operators\n\nconcatenate with +\nTwo lists can be concatenated into a new list by using the + operator.\n\n\n\n\n\n\n\n\nin operator and index method\nWe can check if an item is in a list with the in operator.\n\n\n\n\n\n\nIf you need the position of the element in the list you can use the list index method.\n\n\n\n\n\n\nIf the item is found several times in the list, you will only get the index of the first appareance.\n\n\n\n\n\n\nIf you try to locate the position of an element that is not in the list, you will get an error.",
    "crumbs": [
      "Compound types",
      "Lists"
    ]
  },
  {
    "objectID": "types_and_operators/lists.html#lists-are-mutable",
    "href": "types_and_operators/lists.html#lists-are-mutable",
    "title": "Lists",
    "section": "Lists are mutable",
    "text": "Lists are mutable\nStrings were inmutable sequences, once you create a string, it can not be changed. You can obtain a new modified string, for instance an uppercase string, but the original string will be unmodified.\n\n\n\n\n\n\nYou might have though that the original string was lost because most of the time we were reusing the name of the variable.\n\n\n\n\n\n\nBut what is going one in this code is more subtle:\n\ndna = “atcg” creates, and stores in memory, the string “atcg” and assigns the dna varible as a reference to it.\ndna.upper() creates a new string “ATCG”\ndna = dna.upper() assing the dna variable to the new string “ATCG”\nThere is now no variable referencing to the original “actg” string, so even if it would still be in memory it would be inaccessible to us.\nAt some point the Python interpreter will remove the original “actg” string from memory because it is not referenced by any variable, but this is of no concern to us. (This process is known in computer science as garbage collection, and Python is a garbage collected language).\n\nLists, on the other hand, are mutable. As an example, let’s use the append method, that appends a item to the list.\n\n\n\n\n\n\nAs you can see the variables dna and dna2 refer to the same list in memory, so when we change that list, in this case by adding a new letter, both variables print the same result. It is worth mentioning that the append method, unlike the string methods, does not return a new list.\n\nappend and extend\nThe append method adds an element to the list.\n\n\n\n\n\n\nThe extend method adds any number of elements to the list, it takes any iterable.\n\n\n\n\n\n\nPredict the result of running the following code:\n\n\n\n\n\n\nWhat would happend if you try to append a list of numbers? Try it, and explain the result.\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\nappend adds one item to the list and, in this case, this element happens to be the list [4, 5, 42], so no problem, we end up with a list that has this element in it.\n\n\n\n\n\n\nModify the list using indexes\nLists can also ve changed by using the indexing syntax.\n\n\n\n\n\n\nPredict the result of running the following code and think about why the two methods yield different results.\n\n\n\n\n\n\n\n\ntuples\nIn python there is another type, very similar to a list, but inmutable, the tuple. We create tuples using parentheses instead of square brackets.\n\n\n\n\n\n\nIf you try to modify a tuple, you will get an error.\n\n\n\n\n\n\nPython tuples have a gotcha. They are created using parentheses, but if you want to create a tuple with just one element you need to include a trailing comma.",
    "crumbs": [
      "Compound types",
      "Lists"
    ]
  },
  {
    "objectID": "types_and_operators/lists.html#empty-lists-or-tuples-are-false",
    "href": "types_and_operators/lists.html#empty-lists-or-tuples-are-false",
    "title": "Lists",
    "section": "Empty lists or tuples are false",
    "text": "Empty lists or tuples are false\nCreate an empty list and an empty tuple and trasnform it into a boolean (type cast it into a boolean). Create also a list and a tuple with one element and type cast it to boolean.\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nRemember that you can transform to boolean using the bool function.\nYou won’t be able to create an empty tuple using the following syntax:\n\nt = ()\n\nBut you can use the tuple function.\n\n\n\n\n\n\n\n\n\n\n\nTip",
    "crumbs": [
      "Compound types",
      "Lists"
    ]
  },
  {
    "objectID": "types_and_operators/lists.html#more-methods-help",
    "href": "types_and_operators/lists.html#more-methods-help",
    "title": "Lists",
    "section": "More methods, help",
    "text": "More methods, help\nThe functionallity offered by the list and tuple types is very rich, if you want to explore it in more detail remember the official documentation and the help function.",
    "crumbs": [
      "Compound types",
      "Lists"
    ]
  },
  {
    "objectID": "types_and_operators/lists.html#more-exercises",
    "href": "types_and_operators/lists.html#more-exercises",
    "title": "Lists",
    "section": "More exercises",
    "text": "More exercises\nCarry out the following manipulations.\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip",
    "crumbs": [
      "Compound types",
      "Lists"
    ]
  },
  {
    "objectID": "intro/flow_and_variables.html",
    "href": "intro/flow_and_variables.html",
    "title": "Flow and variables",
    "section": "",
    "text": "The computer code is execute one line (or statement) at a time. The order in which the lines are executed is called flow.\n\n\n\n\n\n\nOrder the lines in the following code, we want the computer to first say Hello, then Your Name, and, finally, an invitation to play.\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nRemember that the lines are executed in order, so change the order of the lines.\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nprint(\"Hello\")\nprint(\"John\")\nprint(\"Do you want to play a nice game of chess?\")",
    "crumbs": [
      "Basics",
      "Flow and variables"
    ]
  },
  {
    "objectID": "intro/flow_and_variables.html#flow",
    "href": "intro/flow_and_variables.html#flow",
    "title": "Flow and variables",
    "section": "",
    "text": "The computer code is execute one line (or statement) at a time. The order in which the lines are executed is called flow.\n\n\n\n\n\n\nOrder the lines in the following code, we want the computer to first say Hello, then Your Name, and, finally, an invitation to play.\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nRemember that the lines are executed in order, so change the order of the lines.\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nprint(\"Hello\")\nprint(\"John\")\nprint(\"Do you want to play a nice game of chess?\")",
    "crumbs": [
      "Basics",
      "Flow and variables"
    ]
  },
  {
    "objectID": "intro/flow_and_variables.html#variables",
    "href": "intro/flow_and_variables.html#variables",
    "title": "Flow and variables",
    "section": "Variables",
    "text": "Variables\nWhen we run programs we store information in the memory of the computer for later use. This is a fundamental idea in computers. You can think about the memory of a computer as a file cabinet in which we can store values like numbers and strings of letters. Internally the memory is divided in small pieces, like the drawers of a filing cabinet, and the computer assings a numeric adress to each of those drawers. So, for instance, we could tell the computer to store the number 42 in the address 00000100, but it would be very cumbersome to use these numeric addresses, so, instead, the we use variables, names that we create, to refer to the memory locations and contents.\nIn different programming languages and expressions a variable can refer to the value stored or to the memory address (pointer). In Python a variable will always be a reference to the object stored. You can think of it as a label in the file cabinet drawer or an arrow that points to the content of the drawer.\n\n\n\nValue stored in a variable\n\n\nIn Python we store a variable in memory by using the assigment operator =.\n\n\n\n\n\n\nPython is doing quite a lot of things for us when we write “favorite_number = 42”:\n\nIt reserves a space in the memory to be able to store the object that is going to create.\nIt creates the object 42.\nIt assigns the favorite_number variable as a reference to the created and stored object.",
    "crumbs": [
      "Basics",
      "Flow and variables"
    ]
  },
  {
    "objectID": "intro/flow_and_variables.html#create-and-print-variables",
    "href": "intro/flow_and_variables.html#create-and-print-variables",
    "title": "Flow and variables",
    "section": "Create and print variables",
    "text": "Create and print variables\nCreate two variables, one with your name, and another one with your surname and print them.\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nname = \"Jane\"\nsurname = \"Doe\"\nprint(\"Hello \", name, \" \", surname)",
    "crumbs": [
      "Basics",
      "Flow and variables"
    ]
  },
  {
    "objectID": "intro/flow_and_variables.html#change-the-value-of-a-variable",
    "href": "intro/flow_and_variables.html#change-the-value-of-a-variable",
    "title": "Flow and variables",
    "section": "Change the value of a variable",
    "text": "Change the value of a variable\nThe variables can be changed to refer to different values/objects. Fix the program to show your real name by changing the value of the variable.\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nname = \"John\"\nname = \"Alice\"\n\nprint(\"My name is \", name)\n\n\n\n\nGiven the following code, think about the expected output, what will the program print when you execute it?\n\n\n\n\n\n\nFix the following code to print the correct name of your Pokemons.\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\nRemember that variable names are not enclosed by quotes and that if you put something inside a quote Python will consider it a text string.\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nmy_pokemon = \"Pikachu\"\nyour_pokemon = \"Ampharos\"\nprint(\"My favorite pokemon is\", my_pokemon)\nprint(\"Your favorite pokemon is\", your_pokemon)\n\n\n\n\nWrite the name and year of release of a movie using two variables.\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIt is very importan to understand the difference between variables and text:\n\nvariable names are not enclosed by quotes.\n\n\n\n\n\n\n\nFix the following code:\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPython allows for several variables to be set at the same time.",
    "crumbs": [
      "Basics",
      "Flow and variables"
    ]
  },
  {
    "objectID": "intro/flow_and_variables.html#resources",
    "href": "intro/flow_and_variables.html#resources",
    "title": "Flow and variables",
    "section": "Resources",
    "text": "Resources\n\nVariables in Python in Real Python.\nprint function official documentation.\nA print function tutorial in Real Python.",
    "crumbs": [
      "Basics",
      "Flow and variables"
    ]
  }
]